@InProceedings{,
  author =       {Dominic Kempf and Timo Koch},
  title =        {System testing in scientific numerical software frameworks using the example of DUNE},
  OPTcrossref =  {},
  OPTkey =       {},
  OPTbooktitle = {},
  year =      {2016},
  OPTeditor =    {},
  OPTvolume =    {},
  OPTnumber =    {},
  OPTseries =    {},
  OPTpages =     {},
  OPTmonth =     {},
  OPTaddress =   {},
  OPTorganization = {},
  OPTpublisher = {},
  OPTnote =      {accepted},
  summary =    {}
}

@article {SPE:SPE2220,
author = {Dubey, Anshu and Weide, Klaus and Lee, Dongwook and Bachan, John and Daley, Christopher and Olofin, Samuel and Taylor, Noel and Rich, Paul M. and Reid, Lynn B.},
title = {Ongoing verification of a multiphysics community code: FLASH},
journal = {Software: Practice and Experience},
volume = {45},
number = {2},
issn = {1097-024X},
url = {http://dx.doi.org/10.1002/spe.2220},
doi = {10.1002/spe.2220},
pages = {233--244},
keywords = {multiple platforms, parallel computing, regression testing, verification},
year = {2015},
}


@TechReport{Turcksin2015,
  author =       {Bruno Turcksin and Timo Heister and Wolfgang Bangerth},
  title =        {Clone and graft: Testing scientific applications as they are built},
  institution =  {arXiv},
  year =         {},
  url =          {http://arxiv.org/abs/1508.07231},
  OPTkey =       {},
  OPTtype =      {},
  OPTnumber =    {},
  OPTaddress =   {},
  OPTmonth =     {},
  OPTnote =      {},
  OPTannote =    {},
  summary = {
- physics-based testing
- automatic
- running many tests using tailored tools
- includes examples}
}

@article{Kanewala20141219,
title = "Testing scientific software: A systematic literature review ",
journal = "Information and Software Technology ",
volume = "56",
number = "10",
pages = "1219 - 1232",
year = "2014",
note = "",
issn = "0950-5849",
doi = "http://dx.doi.org/10.1016/j.infsof.2014.05.006",
url = "http://www.sciencedirect.com/science/article/pii/S0950584914001232",
author = "Upulee Kanewala and James M. Bieman",
keywords = "Scientific software",
keywords = "Software testing",
keywords = "Systematic literature review",
keywords = "Software quality ",
abstract = "AbstractContext Scientific software plays an important role in critical decision making, for example making weather predictions based on climate models, and computation of evidence for research publications. Recently, scientists have had to retract publications due to errors caused by software faults. Systematic testing can identify such faults in code. Objective This study aims to identify specific challenges, proposed solutions, and unsolved problems faced when testing scientific software. Method We conducted a systematic literature survey to identify and analyze relevant literature. We identified 62 studies that provided relevant information about testing scientific software. Results We found that challenges faced when testing scientific software fall into two main categories: (1) testing challenges that occur due to characteristics of scientific software such as oracle problems and (2) testing challenges that occur due to cultural differences between scientists and the software engineering community such as viewing the code and the model that it implements as inseparable entities. In addition, we identified methods to potentially overcome these challenges and their limitations. Finally we describe unsolved challenges and how software engineering researchers and practitioners can help to overcome them. Conclusions Scientific software presents special challenges for testing. Specifically, cultural differences between scientist developers and software engineers, along with the characteristics of the scientific software make testing more difficult. Existing techniques such as code clone detection can help to improve the testing process. Software engineers should consider special challenges posed by scientific software such as oracle problems when developing testing techniques. "
}

@article{Machado20141183,
title = "On strategies for testing software product lines: A systematic literature review ",
journal = "Information and Software Technology ",
volume = "56",
number = "10",
pages = "1183 - 1199",
year = "2014",
note = "",
issn = "0950-5849",
doi = "http://dx.doi.org/10.1016/j.infsof.2014.04.002",
url = "http://www.sciencedirect.com/science/article/pii/S0950584914000834",
author = "Ivan do Carmo Machado and John D. McGregor and Yguaratã Cerqueira Cavalcanti and Eduardo Santana de Almeida",
keywords = "Software product lines",
keywords = "Software testing",
keywords = "Software quality",
keywords = "Systematic literature review ",
abstract = "AbstractContext Testing plays an important role in the quality assurance process for software product line engineering. There are many opportunities for economies of scope and scale in the testing activities, but techniques that can take advantage of these opportunities are still needed. Objective The objective of this study is to identify testing strategies that have the potential to achieve these economies, and to provide a synthesis of available research on \{SPL\} testing strategies, to be applied towards reaching higher defect detection rates and reduced quality assurance effort. Method We performed a literature review of two hundred seventy-six studies published from the year 1998 up to the 1 st semester of 2013. We used several filters to focus the review on the most relevant studies and we give detailed analyses of the core set of studies. Results The analysis of the reported strategies comprised two fundamental aspects for software product line testing: the selection of products for testing, and the actual test of products. Our findings indicate that the literature offers a large number of techniques to cope with such aspects. However, there is a lack of reports on realistic industrial experiences, which limits the inferences that can be drawn. Conclusion This study showed a number of leveraged strategies that can support both the selection of products, and the actual testing of products. Future research should also benefit from the problems and advantages identified in this study. "
}

@article{Kelly201550,
title = "Scientific software development viewed as knowledge acquisition: Towards understanding the development of risk-averse scientific software ",
journal = "Journal of Systems and Software ",
volume = "109",
number = "",
pages = "50 - 61",
year = "2015",
note = "",
issn = "0164-1212",
doi = "http://dx.doi.org/10.1016/j.jss.2015.07.027",
url = "http://www.sciencedirect.com/science/article/pii/S0164121215001533",
author = "Diane Kelly",
keywords = "Scientific software",
keywords = "Software development",
keywords = "Knowledge model ",
abstract = "Abstract This paper presents a model of software development based on knowledge acquisition. The model was formulated from 10 years of studies of scientific software and scientists who develop software as part of their science. The model is used to examine assumptions behind software development models commonly described in software engineering literature, and compare these with the observed way scientists develop software. This paper also explains why a particular type of scientist, one who works in a highly risk-averse application domain, does not conform to the common characterization of all scientists as “end-user programmers”. We offer observations of how this type of scientist develops trustworthy software. We observe that these scientists work outside the ubiquitous method-based software development paradigms, using instead a knowledge acquisition-based approach to software development. We also observe that the scientist is an integral part of the software system and cannot be excluded from its consideration. We suggest that use of the knowledge acquisition software development model requires research into how to support acquisition of knowledge while developing software, how to satisfy oversight in regulated application domains, and how to successfully manage a scientific group using this model. "
}

@article{Anand20131978,
title = "An orchestrated survey of methodologies for automated software test case generation ",
journal = "Journal of Systems and Software ",
volume = "86",
number = "8",
pages = "1978 - 2001",
year = "2013",
note = "",
issn = "0164-1212",
doi = "http://dx.doi.org/10.1016/j.jss.2013.02.061",
url = "http://www.sciencedirect.com/science/article/pii/S0164121213000563",
author = "Saswat Anand and Edmund K. Burke and Tsong Yueh Chen and John Clark and Myra B. Cohen and Wolfgang Grieskamp and Mark Harman and Mary Jean Harrold and Phil McMinn and Antonia Bertolino and J. Jenny Li and Hong Zhu",
keywords = "Adaptive random testing",
keywords = "Combinatorial testing",
keywords = "Model-based testing",
keywords = "Orchestrated survey",
keywords = "Search-based software testing",
keywords = "Software testing",
keywords = "Symbolic execution",
keywords = "Test automation",
keywords = "Test case generation ",
abstract = "Abstract Test case generation is among the most labour-intensive tasks in software testing. It also has a strong impact on the effectiveness and efficiency of software testing. For these reasons, it has been one of the most active research topics in software testing for several decades, resulting in many different approaches and tools. This paper presents an orchestrated survey of the most prominent techniques for automatic generation of software test cases, reviewed in self-standing sections. The techniques presented include: (a) structural testing using symbolic execution, (b) model-based testing, (c) combinatorial testing, (d) random testing and its variant of adaptive random testing, and (e) search-based testing. Each section is contributed by world-renowned active researchers on the technique, and briefly covers the basic ideas underlying the method, the current state of the art, a discussion of the open research problems, and a perspective of the future development of the approach. As a whole, the paper aims at giving an introductory, up-to-date and (relatively) short overview of research in automatic test case generation, while ensuring a comprehensive and authoritative treatment. "
}

